openapi: 3.0.0
info:
  title: 'API Documentation - RevoU Week 10'
  version: '1.0'
  description: 'Back-end API for transfering money from user to other user. Middleware, authentication, and authorization assignment.'
servers:
  - url: http://localhost:3000/api/v1
    description: 'Local development server'
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Bearer with JWT Token'
  schemas:
    registerNewUserRequest:
      type: object
      required:
        - username
        - role
        - password
      properties:
        username:
          type: string
          minLength: 1
        role:
          type: string
          enum:
            - maker
            - approver
            - admin
        password:
          type: string
          minLength: 8
          pattern: "^[a-zA-Z0-9]+$"
      example:
        username: maker123
        role: maker
        password: maker123
    loginrequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: maker123
        password: toni
    CreateNewTransferRequestRequest:
      type: object
      required:
        - amount
        - currency
        - sourceAccount
        - destinationAccount
      properties:
        amount:
          type: integer
          format: int32
        currency:
          type: string
        sourceAccount:
          type: string
        destinationAccount:
          type: string
      example:
        amount: 5000
        currency: IDR
        sourceAccount: 64e45ad04e563816b50c6701
        destinationAccount: 64e4d44a5f843411c24187c2
paths:
  /register:
    post:
      summary: Register New User
      operationId: registerNewUser
      requestBody:
        description: New user registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerNewUserRequest'
            example:
              username: maker123
              role: maker
              password: maker123
      responses:
        '200':
          description: Registration successful
  /login:
    post:
      summary: User Login
      operationId: login
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginrequest'
            example:
              username: maker123
              password: toni
      responses:
        '200':
          description: Login successful
  /transfer:
    get:
      security:
        - bearer: []
      summary: Get All Transfer Requests
      operationId: getAllTransferRequests
      responses:
        '200':
          description: Successful response
    post:
      security:
        - bearer: []
      summary: Create New Transfer Request
      operationId: CreateNewTransferRequest
      requestBody:
        description: Transfer request data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewTransferRequestRequest'
            example:
              amount: 5000
              currency: IDR
              sourceAccount: 64e45ad04e563816b50c6701
              destinationAccount: 64e4d44a5f843411c24187c2
      responses:
        '200':
          description: Transfer request created
  /:
    patch:
      security:
        - bearer: []
      summary: Update Transfer Request
      operationId: updateTransferRequest
      parameters:        # Add the parameter here
        - name: transactionId
          in: path        # Parameter is in the path
          description: ID of the transaction to be updated
          required: true
          schema:
            type: string   # Change the type to match the actual type of the transaction ID
      requestBody:
        description: Transfer update data
        required: true
        content:
          text/plain:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - approved
                    - rejected
              example: |
                {
                    "status": "pending"
                }
      responses:
        '200':
          description: Transfer request updated
    delete:
      security:
        - bearer: []
      summary: Delete Transfer Request
      operationId: deleteTransferRequest
      parameters:          
        - name: transactionId
          in: path
          description: ID of the transaction to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transfer request deleted
  /users:
    get:
      summary: Get All Users
      operationId: getAllUsers
      responses:
        '200':
          description: List of users
security: []
